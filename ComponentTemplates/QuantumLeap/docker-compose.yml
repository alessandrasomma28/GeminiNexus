version: "3.8"
services:
  # Orion-LD is the context broker
  orion:
    image: quay.io/fiware/orion-ld:${ORIONLD_VERSION}
    environment:
    # This option is for enabling the Temporal Representation of Entities
      #- ORIONLD_TROE=TRUE
      #- ORIONLD_TROE_USER=orion
      #- ORIONLD_TROE_PWD=orion
      #- ORIONLD_TROE_HOST=timescale
      - ORIONLD_MONGO_HOST=mongo
    hostname: orion
    container_name: fiware-orion
    depends_on:
      mongo-db:
        condition: service_healthy
      timescale:
        condition: service_healthy
    networks:
      - default
    expose:
      - "${ORIONLD_PORT}"
    ports:
      - "${ORIONLD_PORT}:${ORIONLD_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:${ORIONLD_PORT}/version || exit 1
      interval: 5s
      
  # Quantum Leap is persisting Short Term History to Crate-DB
  quantumleap:
    image: orchestracities/quantumleap:${QUANTUMLEAP_VERSION}
    hostname: quantumleap
    container_name: fiware-quantumleap
    ports:
      - "${QUANTUMLEAP_PORT}:${QUANTUMLEAP_PORT}"
    depends_on:
        orion:
            condition: service_healthy
        mongo-db:
            condition: service_healthy
        redis-db:
            condition: service_healthy

    environment:
      - QL_DEFAULT_DB=timescale
      - POSTGRES_HOST=timescale
      - POSTGRES_PORT=5432
      - POSTGRES_DB_NAME=quantumleap
      - POSTGRES_DB_USER=postgres
      - POSTGRES_DB_PASS=postgres
      - POSTGRES_USE_SSL=False
      #- QL_CONFIG=C:/Users/manfr/Desktop/FIWARE/dockerfile-ale/grafana-service-ql/config.yaml
      #- CRATE_HOST=crate-db
      - USE_GEOCODING=False
      - CACHE_QUERIES=True
      - REDIS_HOST=redis-db
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
    healthcheck:
      test: curl --fail -s http://quantumleap:${QUANTUMLEAP_PORT}/version || exit 1     

    
  # Databases
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data
    healthcheck:
      test: [ "CMD", "mongo", "--quiet", "127.0.0.1/test", "--eval", "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"]
      interval: 5s

  timescale:
    image: timescale/timescaledb-postgis:${TIMESCALE_VERSION}
    hostname: timescale
    container_name: timescale
    expose:
        - "${TIMESCALE_DB_PORT}"
    ports:
        - "${TIMESCALE_DB_PORT}:${TIMESCALE_DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U orion" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 60s
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
     - default


  quantumleap-db-setup:
    build: ../timescale-container/
    image: orchestracities/quantumleap-pg-init
    depends_on:
      timescale:
        condition: service_healthy
    environment:
      - QL_DB_PASS=postgres
      - QL_DB_INIT_DIR=/ql-db-init
      - PG_HOST=timescale
      - PG_PASS=postgres      
      

  redis-db:
    image: redis:${REDIS_VERSION}
    hostname: redis-db
    container_name: db-redis
    networks:
      - default
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}" # localhost:6379
    volumes:
      - redis-db:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s     

  # Other services
  grafana:
    image: grafana/grafana:8.5.27
    container_name: grafana
    depends_on:
      - timescale
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    environment:
      - GF_INSTALL_PLUGINS=orchestracities-map-panel,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana:/var/lib/grafana


networks:
  default:

volumes:
  mongo-db: ~
  redis-db: ~
  grafana: ~